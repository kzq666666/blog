<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Js on Blogs Of KZQ</title>
    <link>/tags/js/</link>
    <description>Recent content in Js on Blogs Of KZQ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 01 Nov 2018 17:52:19 +0800</lastBuildDate>
    
	<atom:link href="/tags/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Typeof</title>
      <link>/posts/blogs/typeof/</link>
      <pubDate>Thu, 01 Nov 2018 17:52:19 +0800</pubDate>
      
      <guid>/posts/blogs/typeof/</guid>
      <description> typeof返回一个字符串,表示为经计算的操作数的类型 typeof(操作数)/typeof 操作数 ()是可以省略的 返回有五种基本类型:string,number,boolean,null,undefined,function 还有ES6的Symbol
1.string: typeof(&amp;#39;你好&amp;#39;) typeof(&amp;#39;123&amp;#39;) typeof(&amp;#39;&amp;#39;) 空字符串也是String类型 typeof(typeof(&amp;#39;a&amp;#39;)) 2.number: typeof(123); typeof(NaN); 3.boolean: typeof(true); typeof(false); typeof(NaN===NaN) 强制类型转换 4.undefined: typeof(a) 未经使用的变量的数据类型 5.object: typeof(null) js底层所有值的前三位表示数据类型,object是000,而null的32位全是0,因此也是object typeof([]) typeof({}) 6.function: typeof(function(){}) typeof(new Function()) typeof(class A{}) typeof(Symbol) 7.symbol: typeof(Symbol())  暂时性死区 在ES6中let和const出现之前,typeof都是一个完全安全的操作,即不会报错,但有了ES6中let和const的出现所带来的暂时性死区特性,使得typeof也有可能报错
如果在一个块级作用域下存在let或const命令,则它所声明的变量就绑定在这个区域,不再受外部的影响.在声明之前使用这些变量就会报错.使用let命令声明变量之前是不可用的,这在语法上称为暂时性死区
typeof(a); //ReferenceError let a; </description>
    </item>
    
  </channel>
</rss>